"""
Django settings for pydjango project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^zwe-ioi#!sx8$rc6jx(g2h6372%86m806in5hzwz3_ad=%w5)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 验证请求头的HOST字段
# ALLOWED_HOSTS = ['tk']
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'corsheaders',  # 跨域支持

    # admin site
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 1st
    'django.middleware.gzip.GZipMiddleware',  # 处理gzip压缩,减轻服务器压力
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会设置sesson_id用户唯一标示信息

    'corsheaders.middleware.CorsMiddleware',  # 跨域支持

    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware', # POST 请求不带csrfmiddlewaretoken 过不了
    # 认证(authentiaction)和授权(authorization)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # AuthenticationMiddleware在session中保存用户信息
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True  # 允许跨域

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates').replace('\\', '/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ROOT_URLCONF = 'pyxdev.urls'

WSGI_APPLICATION = 'pyxdev.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    # 'default':{
    # 'ENGINE': 'django.db.backends.sqlite3',
    # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        "NAME": "django",
        "USER": "imake",
        "PASSWORD": "12315",
        "HOST": "tk",
        "PORT": "3306"
    }
}

# django.db.transaction 提供 “显性” 控制事务的方式
ATOMIC_REQUESTS = True  # Django在调用视图方法前开启一个事务，默认每次数据库操作一个事务

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher',
    'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',  # 只有这个没有加算法标识头，通用型 => {配合auth也麻烦}
    'django.contrib.auth.hashers.CryptPasswordHasher',

    # ##内部使用的算法名:
    # pbkdf2_sha256
    # pbkdf2_sha1
    # argon2
    # bcrypt_sha256
    # bcrypt
    # sha1
    # md5
    # unsalted_sha1
    # unsalted_md5
    # crypt
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 两个设置会相互干扰
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
# USE_TZ = True
USE_TZ = False

USE_I18N = True
# USE_L10N = True
USE_L10N = False
# 日期格式化
# DATETIME_FORMAT = 'Y-m-d H:i:s'
DATE_FORMAT = 'Y-m-d'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
#
STATIC_URL = '/static/'  # URL映射 => http://ip:port/static/

# STATIC_ROOT = os.path.join(BASE_DIR,'static') # python manage.py collectstatic 就可以把静态文件收集到（复制到） STATIC_ROOT 目录

# 静态可访问资源文件(STATIC_URL在系统内部的文件映射)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# session 配置
SESSION_COOKIE_NAME = "tk"  # 无效
SESSION_SAVE_EVERY_REQUEST = True  # 默认修改才保存,问题：使用cahe做为后端时，后端会过期，导致session强制过期
SESSION_COOKIE_AGE = 24 * 60 * 60  # seconds
# SESSION_COOKIE_AGE = 30 * 60  # seconds
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_EXPIRE_AT_BROWSER_CLOSE为True时 SESSION_COOKIE_AGE 不生效


LOGGING = {
    'disable_existing_loggers': False,
    'version': 1,
    'handlers': {
        'console': {
            # logging handler that outputs log messages to terminal
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',  # message level to be written to console
        },
    },
    'loggers': {
        '': {
            # this sets root level logger to log debug and higher level
            # logs to console. All other loggers inherit settings from
            # root level logger.
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,  # this tells logger to send logging message
            # to its parent (will send if set to True)
        },
        'django.db': {
            # django also has database level logging
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# from django.conf import settings  => KEY 必须大写

# {{{
# plugin start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# redis-sessions ###############################################################
# pip sintall django-redis-sessions
# @Deprecated replace by django-redis
# SESSION_ENGINE = 'redis_sessions.session'  # default : django.contrib.sessions.backends.db
#
# SESSION_REDIS = {
#     'host': 'tk',
#     'port': 6379,
#     'db': 0,
#     'password': '',
#     'prefix': 'session',
#     'socket_timeout': 1
# }

# cache ########################################################################
# pip install django-redis
CACHES = {
    # redis key => KEY_PREFIX:VERSION:APP_KEY

    "default": {  # 必须有个"default"值的缓存
        # "CLIENT_CLASS": "", # 指定redis的实现
        "TIMEOUT": 30 * 60,
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://tk:6379/1",  # redis://[:password@]hostname:6379/0
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "PARSER_CLASS": "redis.connection.HiredisParser",
        },
        "KEY_PREFIX": "cache",
        "VERSION": "version"
    },
    "sessions": {
        "TIMEOUT": 30 * 60,  # seconds，默认值是5分钟，此处失效,session 组件会设置过期时间
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://tk:6379/2",  # redis://[:password@]hostname:6379/0
        "OPTIONS": {  # 透传参数
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",  # 序列化,默认pickle
            "PARSER_CLASS": "redis.connection.HiredisParser",  # hiredis 解析器，默认python redis
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 30
            }
        },
        "VERSION": "version",  # default 1
        "KEY_PREFIX": "sessions",
        "MAX_ENTRIES": 100000,  # 默认值300
        "CULL_FREQUENCY": 10,  # 1/CULL_FREQUENCY(删除数据比例关系),默认值3
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "sessions"  # CACHE配置中的名称

# celery #########################################################################
# celery 3.x => django-celery
# celery 4.x => django-celery-beat
# djcelery.setup_loader()  # 加载相关配置
# INSTALLED_APPS += ('djcelery',)  # 单独引入djcelery模块, 有依赖关系
INSTALLED_APPS += ('django_celery_beat',)

# CELERY_ALWAYS_EAGER = True  #导入任务被立即执行，退化为普通的函数调用，非队列模式
# task.delay(*args,**kwargs)  #EAGER模式时，退化为普通的函数调用，非队列模式

BROKER_URL = 'redis://tk:6379/1'
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers:DatabaseScheduler'  # 定时任务
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'  # 定时任务
# CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'  # celery_taskmeta.result 数据是base64加密
CELERY_RESULT_BACKEND = 'django_celery_beat.backends.database:DatabaseBackend'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'

# admin 使用方式
"""
1.配置周期性选项crontab(Djcelery.Crontabs),interval(Djcelery.Interval) => 配置周期性任务时的下拉选项
2.配置周期性任务(Djcelery.Periodic tasks) 
"""

# search ##########################################################################
# python manage.py rebuild_index
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
#         'ENGINE': 'django_shared.haystack.backends.whoosh_cn_backend.WhooshEngine',
#         'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
#     },
# }

# 当添加、修改、删除数据时，自动生成索引
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 20  # 指定搜索结果每页显示多少条信息

# plugin end >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# }}}
